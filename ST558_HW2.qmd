---
title: "ST558 HW2 - Lee Worthington"
format: html
editor: visual
---

# Task 1 
### Q1 - create vectors of treatments
```{r}
pre_treatment <- c(130, 128, 116, 124, 133, 134, 118, 126, 114, 127, 141, 138, 128, 140, 137, 131, 120, 128, 139, 135)
post_treatment <- c(114, 98, 113, 99, 107, 116, 113, 111, 119, 117, 101, 119, 130, 122, 106, 106, 124, 102, 117, 113)
```

### Q2 - assign names to the vectors
```{r}
names <- paste("Subject", 1:20, sep = "_")
names(pre_treatment) <- names
names(post_treatment) <- names
```

### Q3 - calculate blood pressure delta
```{r}
treatment_delta <- pre_treatment - post_treatment
```

### Q4 - calculate average difference
```{r}
average_delta <- mean(treatment_delta)
```

### Q5 - determine decreases in blood pressure
```{r}
bp_decrease <- which(treatment_delta > 0)
```

### Q6 - return patients whose bp decreased
```{r}
improved_patients <- treatment_delta[bp_decrease]
```

### Q7 - average bp decrease
```{r}
avg_improvement <- mean(improved_patients)
avg_improvement
```



# Task 2
### Q1 - create dataframe using prior data
```{r}
# load data to df
bp_data <- data.frame(patient = names, 
                      pre_bp = pre_treatment, 
                      post_bp = post_treatment, 
                      diff_bp = treatment_delta)

# reassign row names
rownames(bp_data) <- NULL
```

### Q2 - return only negative diff_bp (dont overwrite, just print)
```{r}
# filter rows, select all columns
bp_data[(bp_data$diff_bp < 0), c('patient', 'pre_bp', 'post_bp', 'diff_bp')]
```

### Q3 - add binary flag on bp
```{r}
# initiate new field and populate it (see control flow logical notes)
bp_data$post_bp_less_120 <- bp_data$post_bp < 120

```

### Q4 - print dataframe
```{r}
knitr::kable(bp_data, caption = "Blood Pressure Data")
```



# Task 3
### Q1 - create data frame
```{r}

# create data
pre_treatment <- c(138, 135, 147, 117, 152, 134, 114, 121, 131, 130)
post_treatment <- c(105, 136, 123, 130, 134, 143, 135, 139, 120, 124)

# assign names
names <- paste("Subject", 1:10, sep = "_")
names(pre_treatment) <- names
names(post_treatment) <- names

# calculate delta and those with an improvement
treatment_delta <- pre_treatment - post_treatment

# load data to df
bp_data_placebo <- data.frame(patient = names, 
                              pre_bp = pre_treatment, 
                              post_bp = post_treatment, 
                              diff_bp = treatment_delta)

# return only negative diff_bp
#bp_data_placebo <- bp_data_placebo[(bp_data_placebo$diff_bp < 0), c('patient', 'pre_bp', 'post_bp', 'diff_bp')]

# add a flag for those with < 120 post bp
bp_data_placebo$post_bp_less_120 <- bp_data_placebo$post_bp < 120

```

### Q2 - create list
```{r}
trial_list <- list(treatment = bp_data, placebo = bp_data_placebo)
```

### Q3 - pull 1st list element using different syntaxes
```{r}
#trial_list[1] # does not techincally access the element
trial_list[[1]]
trial_list[['treatment']]
trial_list$treatment
```

### Q4 - pull placebo pre_bp columns from list
```{r}
trial_list$placebo$pre_bp
#trial_list[['placebo']][['pre_bp']] # this also works, but more code
```



# Task 4 
### Q1 - add empty column to list dfs
```{r}
trial_list$treatment$status <- character(20)
trial_list$placebo$status <- character(10)
```

### Q2 - create for loop for non-placebo post treatment bp
```{r}
# create loop to classify bp
for (i in 1:20){
  if(trial_list$treatment$post_bp[i] > 130){
    trial_list$treatment$status[i] <- 'High'
  } 
  
  else if (trial_list$treatment$post_bp[i] > 120){
    trial_list$treatment$status[i] <- 'Borderline'
  } 
  
  else if (trial_list$treatment$post_bp[i] > 0){
    trial_list$treatment$status[i] <- 'Optimal'
  } 
  
  else{
    trial_list$treatment$status[i] <- 'Error'
  }
}

# print results
trial_list$treatment

```

### Q3 - create for loop for placebo post treatment bp
```{r}
# create loop to classify bp
for (i in 1:10){
  if(trial_list$placebo$post_bp[i] > 130){
    trial_list$placebo$status[i] <- 'High'
  } 
  
  else if (trial_list$placebo$post_bp[i] > 120){
    trial_list$placebo$status[i] <- 'Borderline'
  } 
  
  else if (trial_list$placebo$post_bp[i] > 0){
    trial_list$placebo$status[i] <- 'Optimal'
  } 
  
  else{
    trial_list$placebo$status[i] <- 'Error'
  }
}

# print results
trial_list$placebo
```



# Task 5
### Create summary statistic function
```{r}
# create function
summaryStatistics <- function(input_list, stat = 'mean'){
  
  # get input statistic
  func <- get(stat)
  
  # calculate the statistic on specified columns
  pre_treatment_bp <- func(input_list$treatment$pre_bp)
  post_treatment_bp <- func(input_list$treatment$post_bp)
  diff_treatment_bp <- func(input_list$treatment$diff_bp)
  
  pre_placebo_bp <- func(input_list$placebo$pre_bp)
  post_placebo_bp <- func(input_list$placebo$post_bp)
  diff_placebo_bp <- func(input_list$placebo$diff_bp)
  
  # create vector with the calculated statistics
  stat_values <- c(pre_treatment_bp, post_treatment_bp, diff_treatment_bp,
                   pre_placebo_bp, post_placebo_bp, diff_placebo_bp)
  
  # create vector of names
  stat_names <- c(
    paste('pre_treatment_bp', stat, sep = '_'),
    paste('post_treatment_bp', stat, sep = '_'),
    paste('diff_treatment_bp', stat, sep = '_'),
    paste('pre_placebo_bp', stat, sep = '_'),
    paste('post_placebo_bp', stat, sep = '_'),
    paste('diff_placebo_bp', stat, sep = '_')
  )
  
  # combine the stats and names
  names(stat_values) <- stat_names
  
  # return the values
  return(stat_values)
}
```

### Print function results
```{r}
summaryStatistics(input_list = trial_list) # default
summaryStatistics(input_list = trial_list, stat = 'mean') # default check
summaryStatistics(input_list = trial_list, stat = 'var') 
summaryStatistics(input_list = trial_list, stat = 'sd') 
summaryStatistics(input_list = trial_list, stat = 'min')
summaryStatistics(input_list = trial_list, stat = 'max') 
```



